1. What happens when you initialize a repository? Why do you need to do it?

	A '.git' directory is created with no initial commits when you initialize
	a repository.

	You need to initialize a repository in order to create a '.git' directory
	that will store all the committed files.

2. How is the staging area different from the working directory and the repository? 
   What value do you think it offers?

	The staging area offers a container to batch files that need to be committed together. 

3. How can you use the staging area to make sure you have one commit per logical change?

	Since files that are linked to each other are stored in the staging area, any logical
	change will only require committing those files which are likely to be affected.

4. What are some situations when branches would be helpful in keeping your history organized? 
   How would branches help?

   Branches would be helpful in developing experimental or new aspects of the app 
   [including language or game levels] that could be added later to the main branch. 

   Branches will help in allowing different aspects of the app to be developed separately and
   combined only when required. It helps with organization. Master branch should never
   break.

5. How do the diagrams help you visualize the branch structure?

   The diagrams enable us to see the parent-child relationships of each of the branches
   as well as their relationships to other branches. Therefore, we know what to expect
   when requesting git to reveal the history of commits.

6. What is the result of merging two branches together? 
   Why do we represent it in the diagram the way we do?

   Their codes are updated and synchronised for both branches.
   The diagram helps in following the commit history in the various branches.
