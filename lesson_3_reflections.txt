1. When would you want to use a remote repository rather than keeping all your work local?
  	A remote repository can be helpful with respect to:
  	a. Sharing the code publicly. This [open source] method has the following advantages:
      i. A global community of programmers can enhance your code and improve the efficiency of your app;
      ii. Programmers can build on the same code for other interesting initiatives.
  	b. Sharing the code privately with other programmers in the project.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with   your remote repository?
	To ensure that we commit only we retain only finished work. I'm not sure there is another reason.

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?
   A branch is used to split up work on a single repository.
   A fork is used to clone all elements from one GitHub repository to another.
   A clone can either copy repositories within a local environment or between a GitHub account and a local environment.

4. What is the benefit of having a copy of the last known state of the remote stored locally?
   This is helpful in case there is a period of time when internet access is unavailable. The
   locally stored state can then be pushed on to GitHub once internet access is available.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
   Dropbox can be an alternative without the extended features of Git/GitHub.
   What would be easier:
   a. the learning curve for myself;
   b. collaborating with multiple people who may not be expected to possess IT skills e.g. using the
   terminal;
   c. some projects would be easier to collaborate on such as editing text files.
   What would be harder:
   a. complex projects require the features of Git/GitHub which provide an excellent memory of the changes;
   b. collaborations with hundreds of people will require a superior organizational structure such as in
   GitHub

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does
   each approach have?
   At this stage with limited experience of GitHub I'm not sure I know the answer. But I guess some reasons to
   work on a branch instead of a master would be when:
   a. you are experimenting with a certain feature of your app;
   b. there are a lot of people working on a larger project, so certain elements are better addressed in a branch
   before they are merged back into the master.

